#include "pch.h"
#include"Kuznechic.cpp"

TEST(GOST_Kuz_S, S_transform_1) {
	uint8_t text[16] = { 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00 };
	uint8_t expected[16] = { 0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc };
	uint8_t encrypted[16];

	GOST_Kuz_S(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_S, S_transform_2) {
	uint8_t text[16] = { 0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc };
	uint8_t expected[16] = { 0x55, 0x9d, 0x8d, 0xd7, 0xbd, 0x06, 0xcb, 0xfe, 0x7e, 0x7b, 0x26, 0x25, 0x23, 0x28, 0x0d, 0x39 };
	uint8_t encrypted[16];

	GOST_Kuz_S(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_S, S_transform_form_example) {
	uint8_t text[16] = { 0x99, 0xbb, 0x99, 0xff, 0x99, 0xbb, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
	uint8_t expected[16] = { 0xe8, 0x7d, 0xe8, 0xb6, 0xe8, 0x7d, 0xe8, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6 };
	uint8_t encrypted[16];

	GOST_Kuz_S(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_reverse_S, S_Reverse_transform_1) {
	uint8_t expected[16] = { 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00 };
	uint8_t text[16] = { 0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc };
	uint8_t encrypted[16];

	GOST_Kuz_reverse_S(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_S, S_Reverse_transform_2) {
	uint8_t expected[16] = { 0xb6, 0x6c, 0xd8, 0x88, 0x7d, 0x38, 0xe8, 0xd7, 0x77, 0x65, 0xae, 0xea, 0x0c, 0x9a, 0x7e, 0xfc };
	uint8_t text[16] = { 0x55, 0x9d, 0x8d, 0xd7, 0xbd, 0x06, 0xcb, 0xfe, 0x7e, 0x7b, 0x26, 0x25, 0x23, 0x28, 0x0d, 0x39 };
	uint8_t encrypted[16];

	GOST_Kuz_reverse_S(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_R, R_transform_1) {
	uint8_t text[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 };
	uint8_t expected[16] = { 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };

	GOST_Kuz_R(text);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(text[i], expected[i]);
	}
}

TEST(GOST_Kuz_R, R_transform_2) {
	uint8_t text[16] = { 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
	uint8_t expected[16] = { 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	GOST_Kuz_R(text);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(text[i], expected[i]);
	}
}

TEST(GOST_Kuz_reverse_R, R_Reverse_transform_1) {
	uint8_t expected[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 };
	uint8_t text[16] = { 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };

	GOST_Kuz_reverse_R(text);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(text[i], expected[i]);
	}
}

TEST(GOST_Kuz_reverse_R, R_Reverse_transform_2) {
	uint8_t expected[16] = { 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 };
	uint8_t text[16] = { 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	GOST_Kuz_reverse_R(text);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(text[i], expected[i]);
	}
}

TEST(GOST_Kuz_L, L_transform_1) {
	uint8_t text[16] = { 0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t expected[16] = { 0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d };
	uint8_t encrypted[16];

	GOST_Kuz_L(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_L, L_transform_2) {
	uint8_t text[16] = { 0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d };
	uint8_t expected[16] = { 0x79, 0xd2, 0x62, 0x21, 0xb8, 0x7b, 0x58, 0x4c, 0xd4, 0x2f, 0xbc, 0x4f, 0xfe, 0xa5, 0xde, 0x9a };
	uint8_t encrypted[16];

	GOST_Kuz_L(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_L, L_transform_from_example) {
	uint8_t text[16] = { 0xe8, 0x7d, 0xe8, 0xb6, 0xe8, 0x7d, 0xe8, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6, 0xb6 };
	uint8_t expected[16] = { 0xe2, 0x97, 0xb6, 0x86, 0xe3, 0x55, 0xb0, 0xa1, 0xcf, 0x4a, 0x2f, 0x92, 0x49, 0x14, 0x08, 0x30 };
	uint8_t encrypted[16];

	GOST_Kuz_L(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_reverse_L, L_Reverse_transform_1) {
	uint8_t expected[16] = { 0x64, 0xa5, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
	uint8_t text[16] = { 0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d };
	uint8_t encrypted[16];

	GOST_Kuz_reverse_L(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_reverse_L, L_Reverse_transform_2) {
	uint8_t expected[16] = { 0xd4, 0x56, 0x58, 0x4d, 0xd0, 0xe3, 0xe8, 0x4c, 0xc3, 0x16, 0x6e, 0x4b, 0x7f, 0xa2, 0x89, 0x0d };
	uint8_t text[16] = { 0x79, 0xd2, 0x62, 0x21, 0xb8, 0x7b, 0x58, 0x4c, 0xd4, 0x2f, 0xbc, 0x4f, 0xfe, 0xa5, 0xde, 0x9a };
	uint8_t encrypted[16];

	GOST_Kuz_reverse_L(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_F, F_transform_from_example_1) {
	uint8_t C1[16] = { 0x6e, 0xa2, 0x76, 0x72, 0x6c, 0x48, 0x7a, 0xb8, 0x5d, 0x27, 0xbd, 0x10, 0xdd, 0x84, 0x94, 0x01 };
	uint8_t key1[16] = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };
	uint8_t key2[16] = { 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	uint8_t expected_key_1[16] = { 0xc3, 0xd5, 0xfa, 0x01, 0xeb, 0xe3, 0x6f, 0x7a, 0x93, 0x74, 0x42, 0x7a, 0xd7, 0xca, 0x89, 0x49 };
	uint8_t expected_key_2[16] = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };
	uint8_t out_key1[16];
	uint8_t out_key2[16];

	GOST_Kuz_F(key1, key2, out_key1, out_key2, C1);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(out_key1[i], expected_key_1[i]);
	}
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(out_key2[i], expected_key_2[i]);
	}
}

TEST(GOST_Kuz_F, F_transform_from_example_2) {
	uint8_t C2[16] = { 0xdc, 0x87, 0xec, 0xe4, 0xd8, 0x90, 0xf4, 0xb3, 0xba, 0x4e, 0xb9, 0x20, 0x79, 0xcb, 0xeb, 0x02 };
	uint8_t key1[16] = { 0xc3, 0xd5, 0xfa, 0x01, 0xeb, 0xe3, 0x6f, 0x7a, 0x93, 0x74, 0x42, 0x7a, 0xd7, 0xca, 0x89, 0x49 };
	uint8_t key2[16] = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };
	uint8_t expected_key_1[16] = { 0x37, 0x77, 0x77, 0x48, 0xe5, 0x64, 0x53, 0x37, 0x7d, 0x5e, 0x26, 0x2d, 0x90, 0x90, 0x3f, 0x87 };
	uint8_t expected_key_2[16] = { 0xc3, 0xd5, 0xfa, 0x01, 0xeb, 0xe3, 0x6f, 0x7a, 0x93, 0x74, 0x42, 0x7a, 0xd7, 0xca, 0x89, 0x49 };
	uint8_t out_key1[16];
	uint8_t out_key2[16];

	GOST_Kuz_F(key1, key2, out_key1, out_key2, C2);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(out_key1[i], expected_key_1[i]);
	}
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(out_key2[i], expected_key_2[i]);
	}
}

TEST(GOST_Kuz_X, X_function) {
	uint8_t a[16] = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };
	uint8_t b[16] = { 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	uint8_t c[16];
	uint8_t expected_c[16] = { 0x76, 0x45, 0x10, 0x23, 0xba, 0x89, 0xdc, 0xef, 0x1, 0x32, 0x67, 0x54, 0xcd, 0xfe, 0xab, 0x98 };
	GOST_Kuz_X(a, b, c);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(c[i], expected_c[i]);
	}
}

TEST(multiply_ints_as_polynomials, multiplication) {
	int a = 5;
	int b = 10;
	int expected_c = 34;
	int c = multiply_ints_as_polynomials(a, b);
	EXPECT_EQ(c, expected_c);
}

TEST(GOST_Kuz_Encript, Encrypt_text) {
	uint8_t key1[16] = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };
	uint8_t key2[16] = { 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	uint8_t text[16] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88 };
	uint8_t encrypted[16];
	uint8_t expected[16] = { 0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30, 0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4, 0xed, 0xcd };
	GOST_Kuz_Expand_Key(key1, key2);
	GOST_Kuz_Encript(text, encrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(encrypted[i], expected[i]);
	}
}

TEST(GOST_Kuz_Decript, Encrypt_text) {
	uint8_t key1[16] = { 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 };
	uint8_t key2[16] = { 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef };
	uint8_t expected[16] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88 };
	uint8_t decrypted[16];
	uint8_t text[16] = { 0x7f, 0x67, 0x9d, 0x90, 0xbe, 0xbc, 0x24, 0x30, 0x5a, 0x46, 0x8d, 0x42, 0xb9, 0xd4, 0xed, 0xcd };
	GOST_Kuz_Expand_Key(key1, key2);
	GOST_Kuz_Decript(text, decrypted);
	for (int i = 0; i < 16; i++) {
		EXPECT_EQ(decrypted[i], expected[i]);
	}
}